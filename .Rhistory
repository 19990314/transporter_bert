all(rownames(metadata) == colnames(count_data))
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = count_data, colData = metadata, design = ~ Condition)
dds <- DESeq(dds)
res <- results(dds)
write.csv(res,file="deseq2_results01082.csv")
count_data <- read.csv("C:/Users/HP Workstation2/Desktop/test-haowen/data/Normalization/TEST6/TEST6.csv", header=TRUE, row.names=1)
View(count_data)
padj_values <- p.adjust(count_data, method = "BH")
count_data<- apply(count_data,2,as.numeric)
padj_values <- p.adjust(count_data, method = "BH")
print(padj_values)
write.csv(count_data="count_data1.csv")
View(count_data)
res <- padj_values
write.csv(res,file="padj.csv")
install.packages(c("MALDIquant", "MALDIquantForeign"))
library("MALDIquant")
library("MALDIquantForeign")
count_data <- read.csv("C:/Users/HP Workstation2/Desktop/test-haowen/data/Normalization/TEST6/TEST6.csv", header=TRUE, row.names=1)
exampleDirectory <- system.file("count_data",+ package="MALDIquantForeign")
install.packages("readxl")
install.packages("MSnbase")
library(readxl)
library(MSnbase)
install.packages("MSnbase")
library(MSnbase)
library(MSnbase)
library(readxl)
load("H:/My Drive/transportor/mouse_final_integeration_02162023.RData")
View(combined_cell)
View(combined_celltype)
View(combined_group)
View(combined_organ)
library(Seurat)
update.packages("promises")
install.packages("promises")
library(Seurat)
install.packages("promises")
install.packages("promises")
library(Seurat)
install.packages("promises")
library(Seurat)
version.packages("promises")
packageVersion("promises")
uninstall.packages("promises")
remove.packages("promises")
packageVersion("promises")
install.packages("promises")
install.packages("promises")
library(Seurat)
library(Seurat)
install.packages("promises")
library(Seurat)
library(Matrix)
combined_cell@meta.data$cell_type <- Idents(combined_cell)
combined_cell@meta.data$organ_celltype <- Idents(combined_celltype)
combined_cell@meta.data$organ <- Idents(combined_organ)
saveRDS(combined_cell, "combined_cell.rds")
combined_cell <- readRDS("H:/My Drive/transportor/transporter_bert/combined_cell.rds")
View(combined_cell)
all.markers <- FindAllMarkers(object = combined_cell,verbose = FALSE, logfc.threshold = 0.1, group.by = "organ")
all.markers <- FindAllMarkers(object = combined_cell,verbose = FALSE, logfc.threshold = 0.1, split.by = "organ")
Idents(combined_cell) <- combined_cell@meta.data$organ
all.markers <- FindAllMarkers(object = combined_cell,verbose = FALSE, logfc.threshold = 0.2)
options(future.globals.maxSize = 2000 * 1024^2)
all.markers <- FindAllMarkers(object = combined_cell,verbose = FALSE, logfc.threshold = 0.2)
save("02182025.RData")
# Saving on object in RData format
save.image("02182025.RData")
load("H:/My Drive/transportor/transporter_bert/02182025.RData")
View(all.markers)
write.csv(all.markers, "deg_across_organs.csv")
load("H:/My Drive/transportor/transporter_bert")
load("H:/My Drive/transportor/transporter_bert/02182025.rds")
library(tidyverse)
library(RColorBrewer)
library(scales)
library(reshape2)
library(tidyverse)
library(harmony)
library(readxl)
library(readr)
color_ct=c(brewer.pal(12, "Set3")[-c(2,3,9,12)],"#b3b3b3",
brewer.pal(5, "Set1")[2],
brewer.pal(3, "Dark2")[1],
"#fc4e2a","#fb9a99","#f781bf","#e7298a")
names(color_ct)=levels(plot_gene$cluster)
### 主代码 ######################################################################
#vln.df=as.data.frame(integrated[["RNA"]]@data[plot_gene$gene,])
vln.df=as.data.frame(as.data.frame(as.matrix(GetAssayData(combined_cell[["RNA"]], slot = "data")))[plot_gene$gene, ])
vln.df$gene=rownames(vln.df)
vln.df=melt(vln.df,id="gene")
colnames(vln.df)[c(2,3)]=c("CB","exp")
anno=combined_cell@meta.data[,c("CB","cell_type")]
vln.df=inner_join(vln.df,anno,by="CB")
vln.df$gene=factor(vln.df$gene,levels = plot_gene$gene)
vln.df <- vln.df[!is.na(vln.df$cell_type), ]
# 当你想竖直方向排版这张图片时：
vln.df%>%ggplot(aes(cell_type,exp))+
geom_violin(aes(fill=cell_type),scale = "width")+
#如果想最终呈现出来的图，是根据基因涂色的，也就是一个基因一种颜色，应改为：aes(fill=gene)
#一般而言，基因数多于细胞类型数，当根据基因涂色时，配色方案有点繁琐，所以不推荐aes(fill=gene)
facet_grid(gene~.,scales = "free_y")+
scale_fill_manual(values = color_ct)+
scale_y_continuous(expand = c(0,0))+
theme_bw()+
theme(
panel.grid = element_blank(),
axis.title.x.bottom = element_blank(),
axis.ticks.x.bottom = element_blank(),
axis.text.x.bottom = element_text(angle = 45,hjust = 1,vjust = NULL,color = "black",size = 14),
axis.title.y.left = element_blank(),
axis.ticks.y.left = element_blank(),
axis.text.y.left = element_blank(),
legend.position = "none",
panel.spacing.y = unit(0, "cm"),
strip.text.y = element_text(angle=0,size = 14,hjust = 0),
strip.background.y = element_blank()
)
ggsave("brain_slc_markers.pdf",device = "pdf",width = 18,height = 90,units = "cm")
View(vln.df)
View(brain_slc_degs)
plot_gene <- brain_slc_degs[,c("cluster","...1")]
View(plot_gene)
colnames(plot_gene)[colnames(plot_gene) == "...1"] <- "gene"
View(plot_gene)
plot_gene <- plot_gene[1:20,]
#plot_gene <- read_excel("plotgene.xlsx")
plot_gene$cluster=factor(plot_gene$cluster,levels = unique(plot_gene$cluster))
plot_gene <- plot_gene%>%arrange(cluster,gene)
combined_cell@meta.data$cell_type=factor(combined_cell@meta.data$cell_type,levels = levels(plot_gene$cluster))
combined_cell@meta.data$CB=rownames(combined_cell@meta.data)
#integrated@meta.data=integrated@meta.data%>%inner_join(integrated,by="CB")
rownames(combined_cell@meta.data)=combined_cell@meta.data$CB
color_ct=c(brewer.pal(12, "Set3")[-c(2,3,9,12)],"#b3b3b3",
brewer.pal(5, "Set1")[2],
brewer.pal(3, "Dark2")[1],
"#fc4e2a","#fb9a99","#f781bf","#e7298a")
names(color_ct)=levels(plot_gene$cluster)
### 主代码 ######################################################################
#vln.df=as.data.frame(integrated[["RNA"]]@data[plot_gene$gene,])
vln.df=as.data.frame(as.data.frame(as.matrix(GetAssayData(combined_cell[["RNA"]], slot = "data")))[plot_gene$gene, ])
vln.df$gene=rownames(vln.df)
vln.df=melt(vln.df,id="gene")
colnames(vln.df)[c(2,3)]=c("CB","exp")
anno=combined_cell@meta.data[,c("CB","cell_type")]
vln.df=inner_join(vln.df,anno,by="CB")
vln.df$gene=factor(vln.df$gene,levels = plot_gene$gene)
vln.df <- vln.df[!is.na(vln.df$cell_type), ]
# 当你想竖直方向排版这张图片时：
vln.df%>%ggplot(aes(cell_type,exp))+
geom_violin(aes(fill=cell_type),scale = "width")+
#如果想最终呈现出来的图，是根据基因涂色的，也就是一个基因一种颜色，应改为：aes(fill=gene)
#一般而言，基因数多于细胞类型数，当根据基因涂色时，配色方案有点繁琐，所以不推荐aes(fill=gene)
facet_grid(gene~.,scales = "free_y")+
scale_fill_manual(values = color_ct)+
scale_y_continuous(expand = c(0,0))+
theme_bw()+
theme(
panel.grid = element_blank(),
axis.title.x.bottom = element_blank(),
axis.ticks.x.bottom = element_blank(),
axis.text.x.bottom = element_text(angle = 45,hjust = 1,vjust = NULL,color = "black",size = 14),
axis.title.y.left = element_blank(),
axis.ticks.y.left = element_blank(),
axis.text.y.left = element_blank(),
legend.position = "none",
panel.spacing.y = unit(0, "cm"),
strip.text.y = element_text(angle=0,size = 14,hjust = 0),
strip.background.y = element_blank()
)
ggsave("brain_slc_markers.pdf",device = "pdf",width = 18,height = 90,units = "cm")
View(vln.df)
View(combined_cell)
vln.df=as.data.frame(as.data.frame(as.matrix(GetAssayData(combined_cell[["RNA"]], slot = "data")))[plot_gene$gene, ])
DimPlot(combined_cell, reduction = "umap", group.by = "organ", cols = my36colors)
my36colors <- c('#E5D2DD', '#53A85F', '#F1BB72', '#F3B1A0', '#D6E7A3', '#57C3F3', '#5F3D69', '#C5DEBA', '#58A4C3', '#E4C755', '#F7F398','#585658',
'#AA9A59', '#E63863','#E95C59', '#E59CC4', '#AB3282', '#23452F', '#BD956A', '#8C549C', '#476D87',
'#9FA3A8', '#E0D4CA', '#E39A35', '#C1E6F3', '#6778AE', '#91D0BE', '#B53E2B',
'#712820', '#DCC1DD', '#CCE0F5', '#CCC9E6', '#625D9E', '#68A180', '#3A6963',
'#968175')
DimPlot(combined_cell, reduction = "umap", group.by = "organ", cols = my36colors)
DimPlot(combined_cell, reduction = "umap", label = TRUE, repel = TRUE)
DimPlot(combined_cell, reduction = "umap", group.by = "organ", label = TRUE, repel = TRUE,cols = my36colors)
plot_gene <- brain_slc_degs[,c("cluster","...1")]
colnames(plot_gene)[colnames(plot_gene) == "...1"] <- "gene"
# heatmap
# Load required libraries
library(ggplot2)
library(Seurat)
library(gridExtra)
# Define output PDF file
pdf("raw_violin_plots.pdf", width = 10, height = 10)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 9  # 3x3 grid per page
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.2) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(gene_list, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.2) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(plot_gene$gene, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
# Close the PDF file
dev.off()
View(brain_slc_degs)
VlnPlot(combined_cell, features = c("Slc2a1.5", "Slco1c1.5"), group.by = "organ", pt.size = 0.2)
VlnPlot(combined_cell, features = c("slc2a1"), group.by = "organ", pt.size = 0.2)
gene_symbols <- unique(gene_symbols)
gene_symbols
test <- grep("slc", gene_symbols, ignore.case = TRUE, value = TRUE)
grep("slc2a1", gene_symbols, ignore.case = TRUE, value = TRUE)
plot_gene <- brain_slc_degs[,c("cluster","gene")]
# Load required libraries
library(ggplot2)
library(Seurat)
library(gridExtra)
# Define output PDF file
pdf("raw_violin_plots.pdf", width = 10, height = 10)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 9  # 3x3 grid per page
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.2) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(plot_gene$gene, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
# Close the PDF file
dev.off()
View(plot_gene)
VlnPlot(combined_cell, features = c("slc2a1"), group.by = "organ", pt.size = 0.2)
VlnPlot(combined_cell, features = c("slc43a3"), group.by = "organ", pt.size = 0.2)
grep("slc43a3", gene_symbols, ignore.case = TRUE, value = TRUE)
VlnPlot(combined_cell, features = c("slc43a3"),  pt.size = 0.2)
"slc43a3" %in% rownames(combined_cell[["RNA"]])
plot_gene <- brain_slc_degs[,c("cluster","...1")]
colnames(plot_gene)[colnames(plot_gene) == "...1"] <- "gene"
sub("\\..*", "", plot_gene$gene)
plot_gene$gene <- sub("\\..*", "", plot_gene$gene)
# Load required libraries
library(ggplot2)
library(Seurat)
library(gridExtra)
# Define output PDF file
pdf("raw_violin_plots.pdf", width = 10, height = 10)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 9  # 3x3 grid per page
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.2) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(plot_gene$gene, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
# Close the PDF file
dev.off()
# Load necessary library
library(pdftools)
install.packages("pdftools")
# Load necessary library
library(pdftools)
# Define input PDF file
input_pdf <- "raw_violin_plots.pdf"  # Replace with your actual PDF file
# Read the number of pages in the PDF
total_pages <- pdf_info(input_pdf)$pages  # Should be 26
# Define output file names
output_files <- c("raw_violin_part1.pdf", "raw_violin_part2.pdf", "raw_violin_part3.pdf", "raw_violin_part4.pdf")
# Define page splits (first 6, next 6, next 6, last 8)
page_splits <- list(1:6, 7:12, 13:18, 19:26)
# Loop through each subset and save to a new PDF
for (i in seq_along(output_files)) {
pdf_subset(input_pdf, pages = page_splits[[i]], output = output_files[i])
message("Saved: ", output_files[i])
}
# Load required libraries
library(ggplot2)
library(Seurat)
library(gridExtra)
# Define output PDF file
pdf("raw_violin_plots.pdf", width = 7, height = 7)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 9  # 3x3 grid per page
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.2) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(plot_gene$gene, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
pct_thres <- 0.3
fc_thres <- 0.2
pv <- 0.05
brain_slc_degs_filtered <- brain_slc_degs[(brain_slc_degs$p_val<pv & abs(brain_slc_degs$avg_log2FC) > fc_thres),]
brain_slc_degs_filtered <- brain_slc_degs_filtered[(((brain_slc_degs_filtered$avg_log2FC > fc_thres)&(brain_slc_degs_filtered$pct.1>pct_thres))|((brain_slc_degs_filtered$avg_log2FC < -fc_thres)&(brain_slc_degs_filtered$pct.2>pct_thres))),]
brain_slc_degs_filtered <- brain_slc_degs[(brain_slc_degs$p_val<pv & abs(brain_slc_degs$avg_log2FC) > fc_thres),]
View(brain_slc_degs_filtered)
brain_slc_degs_filtered <- brain_slc_degs_filtered[(((brain_slc_degs_filtered$avg_log2FC > fc_thres)&(brain_slc_degs_filtered$pct.1>pct_thres))|((brain_slc_degs_filtered$avg_log2FC < -fc_thres)&(brain_slc_degs_filtered$pct.2>pct_thres))),]
View(brain_slc_degs_filtered)
pct_thres <- 0.2
fc_thres <- 0.2
pv <- 0.05
brain_slc_degs_filtered <- brain_slc_degs[(brain_slc_degs$p_val<pv & abs(brain_slc_degs$avg_log2FC) > fc_thres),]
brain_slc_degs_filtered <- brain_slc_degs_filtered[(((brain_slc_degs_filtered$avg_log2FC > fc_thres)&(brain_slc_degs_filtered$pct.1>pct_thres))|((brain_slc_degs_filtered$avg_log2FC < -fc_thres)&(brain_slc_degs_filtered$pct.2>pct_thres))),]
# Load required libraries
library(ggplot2)
library(Seurat)
library(gridExtra)
# Define output PDF file
pdf("brain_top50_violin_plots.pdf", width = 7, height = 7)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 9  # 3x3 grid per page
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.2) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(plot_gene$gene, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
plot_gene <- brain_slc_degs_filtered[,c("cluster","...1")]
colnames(plot_gene)[colnames(plot_gene) == "...1"] <- "gene"
plot_gene$gene <- sub("\\..*", "", plot_gene$gene)
# Load required libraries
library(ggplot2)
library(Seurat)
library(gridExtra)
# Define output PDF file
pdf("brain_top50_violin_plots.pdf", width = 7, height = 7)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 9  # 3x3 grid per page
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.2) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 14))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(plot_gene$gene, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
# Close the PDF file
dev.off()
```{r}
setwd("H:/My Drive/transportor/transporter_bert")
# Define output PDF file
pdf("brain_top50_violin_plots.pdf", width = 9, height = 9)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 9  # 3x3 grid per page
# Generate violin plots
for (gene in plot_gene$gene) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.1) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 10))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(plot_gene$gene, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 3, nrow = 3))
plot_list <- list()  # Reset plot list
}
}
}
# Close the PDF file
dev.off()
# self
deg_v_plot1 <- c("Slco1c1", "Slc22a8", "Slc38a3", "Slc38a5", "Slc1a1", "Slc19a3", "Stra6","Slc6a13","Slc38a5")
#shared with Testis
deg_v_plot2 <- c("Mfsd2a", "Slc7a5", "Slc16a4", "Mfsd7c","Slc35f2", "Slc19a3", "Mfsd7c", "Slc35f2")
#w/ bladder
deg_v_plot3 <- c("Slc38a11", "Slc5a5")
# Load required libraries
library(ggplot2)
library(Seurat)
library(gridExtra)
# Define output PDF file
pdf("brain_deg_violin_plot.pdf", width = 6, height = 6)  # Adjust width & height as needed
# Set up plot counter
plot_list <- list()
plot_count <- 0
plots_per_page <- 4  # 2*2 grid per page
# Generate violin plots
candidates <- plot_gene$gene
candidates <- c(deg_v_plot1,deg_v_plot2,deg_v_plot3)
for (gene in candidates) {
if (gene %in% rownames(combined_cell)) {  # Ensure the gene exists in the data
p <- VlnPlot(combined_cell, features = gene, group.by = "organ", pt.size = 0.1) +
ggtitle(gene) +
theme(plot.title = element_text(hjust = 0.5, size = 8))
plot_list[[length(plot_list) + 1]] <- p
plot_count <- plot_count + 1
# When reaching 9 plots, print the page
if (plot_count %% plots_per_page == 0 || gene == tail(candidates, 1)) {
do.call(grid.arrange, c(plot_list, ncol = 2, nrow = 2))
plot_list <- list()  # Reset plot list
}
}
}
# Close the PDF file
dev.off()
paste0(plot_gene$gene)
paste0(plot_gene$gene, " ")
print(paste0(plot_gene$gene, ""))
print(paste(plot_gene$gene, ""))
print(paste(as.list(plot_gene$gene), ""))
View(plot_gene)
print(paste(as.list(plot_gene$gene)))
print(paste0(as.list(plot_gene$gene)))
save.image("02182025.rds")
View(combined_cell)
combined_cell@meta.data[["organ_celltype"]]
unique(combined_cell@meta.data[["organ_celltype"]])
# Find EC markers across organs
Idents(combined_cell) <- combined_cell@meta.data$organ_celltype
Brain_EC.markers <- FindMarkers(object = combined_cell, ident.1 = Brain_EC, ident.2 = c(Liver_EC, Heart_EC, Intestine_EC, Testis_EC, Lung_EC, Muscle_EC, Colon_EC, Spleen_EC, Kidney_EC), verbose = FALSE, logfc.threshold = 0.2)
Idents(combined_cell)
combined_cell@meta.data[["organ"]]
unique(combined_cell@meta.data[["organ"]])
unique(combined_cell@meta.data[["organ_celltype"]])
Idents(combined_cell) <- combined_cell@meta.data$organ_celltype
unique(Idents(combined_cell))
Brain_EC.markers <- FindMarkers(object = combined_cell, ident.1 = Brain_EC, ident.2 = c(Liver_EC, Heart_EC, Intestine_EC, Testis_EC, Lung_EC, Muscle_EC, Colon_EC, Spleen_EC, Kidney_EC), verbose = FALSE, logfc.threshold = 0.2)
Brain_EC.markers <- FindMarkers(object = combined_cell, ident.1 = Brain_EC, ident.2 = c(Liver_EC, Heart_EC, Intestine_EC, Testis_EC, Lung_EC, Muscle_EC, Colon_EC, Spleen_EC, Kidney_EC), verbose = FALSE, logfc.threshold = 0.2)
Brain_EC.markers <- FindMarkers(object = combined_cell, ident.1 = Liver_EC, ident.2 = c(Heart_EC, Intestine_EC, Testis_EC, Lung_EC, Muscle_EC, Colon_EC, Spleen_EC, Kidney_EC), verbose = FALSE, logfc.threshold = 0.2)
levels(Idents(combined_cell))
Brain_EC_cells <- WhichCells(combined_cell, ident = "Brain_EC")
Other_cells <- WhichCells(combined_cell, ident = c("Liver_EC", "Heart_EC", "Intestine_EC",
"Testis_EC", "Lung_EC", "Muscle_EC",
"Colon_EC", "Spleen_EC", "Kidney_EC"))
Brain_EC.markers <- FindMarkers(combined_cell,
cells.1 = Brain_EC_cells,
cells.2 = Other_cells,
verbose = FALSE, logfc.threshold = 0.2)
Brain_EC.markers <- FindMarkers(combined_cell,
ident.1 = Brain_EC_cells,
ident.2 = Other_cells,
verbose = FALSE, logfc.threshold = 0.2)
write.csv(Brain_EC.markers, "deg_EC_across_organs.csv")
